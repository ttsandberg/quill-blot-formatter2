import Action from './Action';
import BlotFormatter from '../BlotFormatter';
import ToolbarButton from './toolbar/ToolbarButton';
interface HandleStyle {
    width?: string;
    height?: string;
}
export default class ResizeAction extends Action {
    topLeftHandle: HTMLElement;
    topRightHandle: HTMLElement;
    bottomRightHandle: HTMLElement;
    bottomLeftHandle: HTMLElement;
    dragHandle: HTMLElement | null | undefined;
    dragStartX: number;
    dragCursorStyle: HTMLElement;
    preDragWidth: number;
    pinchStartDistance: number;
    calculatedAspectRatio: number;
    computedAspectRatio: string | undefined;
    target: HTMLElement | null | undefined;
    editorStyle: CSSStyleDeclaration | undefined;
    editorWidth: number;
    useRelativeSize: boolean;
    resizeModeButton: ToolbarButton | null;
    isUnclickable: boolean;
    hasResized: boolean;
    formattedWidth: string;
    private sizeInfoTimerId;
    private isImage;
    private isSVG;
    private naturalWidth;
    constructor(formatter: BlotFormatter);
    onCreate(): void;
    onDestroy(): void;
    createHandle(position: string, cursor: string): HTMLElement;
    repositionHandles(handleStyle?: HandleStyle): void;
    setCursor(value: string): void;
    resizeMode: (activate: boolean) => void;
    onHandlePointerDown: (event: PointerEvent) => void;
    onHandleDrag: (event: PointerEvent) => void;
    onHandlePointerUp: () => void;
    private onOverlayTouchStart;
    private onOverlayTouchMove;
    private onOverlayTouchEnd;
    private onOverlayMouseDown;
    private onOverlayMouseUp;
    resizeTarget(newWidth: number): void;
    showSizeInfo(show: boolean, width?: number | null, height?: number | null): void;
    updateSizeInfo(width: number, height: number): void;
    get isRelative(): boolean;
    get isAligned(): boolean;
    createResizeModeButton(): ToolbarButton;
    onResizeModeClickHandler: EventListener;
    swapResizeMode(showInfo?: boolean): void;
    closeSizeInfo(): void;
    cancelSizeInfoTimer(): void;
    private calculateDistance;
    private roundDimension;
    private isSvgImage;
}
export {};
